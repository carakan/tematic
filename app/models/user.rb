# == Informacion de la tabla
#
# Nombre de la tabla: *users*
#
#  id                        :integer(11)     not null, primary key
#  nombre                    :string(100)
#  apellido                  :string(100)
#  total                     :integer(11)     default(0)
#  profesion_id              :integer(11)     default(0)
#  login                     :string(255)
#  email                     :string(255)
#  crypted_password          :string(40)
#  salt                      :string(40)
#  created_at                :datetime
#  updated_at                :datetime
#  remember_token            :string(255)
#  remember_token_expires_at :datetime
#  activation_code           :string(40)
#  activated_at              :datetime
#  password_reset_code       :string(40)
#  acumulada                 :integer(11)     default(0)
#
# Representa a un usuario autenticado en la base de datos del Banco Tematico
# la contrase√±a se encripta con el aogoritmo sha1
require 'digest/sha1'
class User < ActiveRecord::Base
  # ---------------------------------------
  # The following code has been generated by role_requirement.
  # You may wish to modify it to suit your need
  has_and_belongs_to_many :roles
  # has_role? simply needs to return true or false whether a user has a role or not.  
  # It may be a good idea to have "admin" roles return true always
  def has_role?(role_in_question)
    @_list ||= self.roles.collect(&:name)
    return true if @_list.include?("admin")
    (@_list.include?(role_in_question.to_s) )
  end
  # ---------------------------------------
  # Virtual attribute for the unencrypted password
  attr_accessor :password

  # Cada usuario activado tiene una profesion registrada
  belongs_to :profesion
  
  validates_presence_of     :login, :email, :message => "No puede estar en blanco"
  validates_presence_of     :password,                   :if => :password_required?, :message => "Debe de introducir su contrase&ntilde;a"
  validates_presence_of     :password_confirmation,      :if => :password_required?, :message => "Debe de ser igual a la contrase&ntilde;a"
  validates_length_of       :password, :within => 4..40, :if => :password_required?, :too_short => "Contrase&ntilde;a muy corta (minimo es cuatro caracteres)."
  validates_confirmation_of :password,                   :if => :password_required?
  validates_length_of       :login,    :within => 3..40, :too_short => "Su nombre de usuario, debe de ser mas grande (minimo es tres caracteres)."
  validates_length_of       :email,    :within => 3..100, :too_short => "Correo electronico invalido."
  validates_uniqueness_of   :login, :email, :case_sensitive => false, :message => "Ya existe el registro.", :unless => :recently_reset_password?
  before_save :encrypt_password
  before_create :make_activation_code 
  # prevents a user from submitting a crafted form that bypasses activation
  # anything else you want your user to change should be added here.
  attr_accessible :login, :email, :password, :password_confirmation, :nombre, :apellido, :profesion_id, :password_reset_code

  # Activates the user in the database.
  def activate
    @activated = true
    self.activated_at = Time.now.utc
    self.activation_code = nil
    save(false)
  end

  def active?
    # the existence of an activation code means they have not activated yet
    activation_code.nil?
  end

  # Authenticates a user by their login name and unencrypted password.  Returns the user or nil.
  def self.authenticate(login, password)
    u = find :first, :conditions => ['login = ? and activated_at IS NOT NULL', login] # need to get the salt
    u && u.authenticated?(password) ? u : nil
  end

  # Encrypts some data with the salt.
  def self.encrypt(password, salt)
    Digest::SHA1.hexdigest("--#{salt}--#{password}--")
  end

  # Encrypts the password with the user salt
  def encrypt(password)
    self.class.encrypt(password, salt)
  end

  def authenticated?(password)
    crypted_password == encrypt(password)
  end

  def remember_token?
    remember_token_expires_at && Time.now.utc < remember_token_expires_at 
  end

  # These create and unset the fields required for remembering users between browser closes
  def remember_me
    remember_me_for 2.weeks
  end

  def remember_me_for(time)
    remember_me_until time.from_now.utc
  end

  def remember_me_until(time)
    self.remember_token_expires_at = time
    self.remember_token            = encrypt("#{email}--#{remember_token_expires_at}")
    save(false)
  end

  def forget_me
    self.remember_token_expires_at = nil
    self.remember_token            = nil
    save(false)
  end

  # Returns true if the user has just been activated.
  def recently_activated?
    @activated
  end

  def forgot_password
    @forgotten_password = true
    self.make_password_reset_code
  end

  def reset_password
    # First update the password_reset_code before setting the 
    # reset_password flag to avoid duplicate email notifications.
    update_attributes(:password_reset_code => nil)
    @reset_password = true
  end

  def recently_reset_password?
    @reset_password
  end

  def recently_forgot_password?
    @forgotten_password
  end

  protected
  def make_password_reset_code
    self.update_attribute_with_validation_skipping(:password_reset_code, Digest::SHA1.hexdigest( Time.now.to_s.split(//).sort_by {rand}.join ))
  end

  # before filter 
  def encrypt_password
    return if password.blank?
    self.salt = Digest::SHA1.hexdigest("--#{Time.now.to_s}--#{login}--") if new_record?
    self.crypted_password = encrypt(password)
  end
      
  def password_required?
    crypted_password.blank? || !password.blank?
  end
    
  def make_activation_code
    self.activation_code = Digest::SHA1.hexdigest( Time.now.to_s.split(//).sort_by {rand}.join )
  end 
end
